#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import os.path as osp

import torch
import torch.nn as nn
from torch.nn import functional as F
import pytorch_lightning as pl
import hydra
from omegaconf import OmegaConf

from bvpr.util import process_config, create_callbacks
from bvpr.data.colorization import COCODataset, ColorsDataset
from bvpr.data.colorization import FlowersDataset
from bvpr.experiment import ColorizationExperiment as Experiment
from bvpr.datamodule import ColorizationDataModule as DataModule
from bvpr.data.transform import LAB2RGB

CONFIG_DIR = osp.abspath(osp.join(__file__, "../..", "config"))


@hydra.main(config_path=CONFIG_DIR, config_name="color_generate")
def main(config):
    config = OmegaConf.to_container(config)
    config = pl.utilities.parsing.AttributeDict(config)
    pl.seed_everything(config["seed"])
    assert config["checkpoint"] is not None
    assert config["output"] is not None
    print(config)

    dataset_name = config["dataset"]["dataset"]
    if dataset_name == "colors":
        Dataset = ColorsDataset
    elif dataset_name == "flowers":
        Dataset = FlowersDataset
    elif dataset_name == "coco":
        Dataset = COCODataset

    # data
    train_data = Dataset(split="train", **config["dataset"])
    if train_data.reduce_colors:
        config["priors"] = train_data.priors
    else:
        config["priors"] = train_data.raw_priors

    config["checkpoint"] = osp.abspath(osp.expanduser(config["checkpoint"]))
    # config["trainer"]["resume_from_checkpoint"] = config["checkpoint"]
    config["trainer"]["max_epochs"] = 5000  # FIXME
    ckpt = torch.load(config["checkpoint"])
    config["model"] = ckpt["hyper_parameters"]["model"]
    config["model"] = process_config(config["model"], train_data)

    experiment, datamodule = Experiment(config), DataModule(config)
    state_dict = torch.load(config["checkpoint"])["state_dict"]
    state_dict = {
        ".".join(k.split(".")[1:]): v
        for (k, v) in state_dict.items()
        if k.startswith("model.")
    }
    experiment.model.load_state_dict(state_dict)  # FIXME
    datamodule.setup()
    experiment.lab2rgb = LAB2RGB(ab_mask=train_data.ab_mask)
    trainer = pl.Trainer(
        logger=None,
        callbacks=None,
        **config["trainer"],
    )
    trainer.test(experiment, datamodule=datamodule)

    
if __name__ == "__main__":
    main()